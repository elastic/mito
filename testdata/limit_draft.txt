mito -use limit,collections,time src.cel
! stderr .
cmp stdout want.txt

# Replacing non-static times with a check for temporal progression.
-- src.cel --
[
	{
		"Rate-Limit-Limit": ["100"],
		"Rate-Limit-Remaining": ["0"],
		"Rate-Limit-Reset": ["50"]
	}.as(h, rate_limit(h, 'draft', duration('1m'))).as(r, r.with_replace({"reset": now < r.reset})),
	{
		"Rate-Limit-Limit": ["5000"],
		"Rate-Limit-Remaining": ["100"],
		"Rate-Limit-Reset": ["36000"]
	}.as(h, rate_limit(h, 'draft', duration('1m'))).as(r, r.with_replace({"reset": now < r.reset})),
	{
		"Rate-Limit-Limit": ["5000"],
		"Rate-Limit-Remaining": ["100"],
		"Rate-Limit-Reset": [timestamp("9999-12-31T23:59:59.999999999Z").format(time_layout.HTTP)]
	}.as(h, rate_limit(h, 'draft', duration('1m'))),
	{
		"Rate-Limit-Limit": ["5000, 1000;window=3600, 5000;window=86400"],
		"Rate-Limit-Remaining": ["100"],
		"Rate-Limit-Reset": ["36000"]
	}.as(h, rate_limit(h, 'draft', duration('1m'))).as(r, r.with_replace({"reset": now < r.reset})),
	{
		"Rate-Limit-Limit": ['12, 12;window=1; burst=1000;policy="leaky bucket"'],
		"Rate-Limit-Remaining": ["100"],
		"Rate-Limit-Reset": ["36000"]
	}.as(h, rate_limit(h, 'draft', duration('1m'))).as(r, r.with_replace({"reset": now < r.reset})),
]
-- want.txt --
[
	{
		"burst": 1,
		"headers": "Rate-Limit-Limit=\"100\" Rate-Limit-Remaining=\"0\" Rate-Limit-Reset=\"50\"",
		"next": 1.6666666666666667,
		"rate": 0,
		"reset": true
	},
	{
		"burst": 1,
		"headers": "Rate-Limit-Limit=\"5000\" Rate-Limit-Remaining=\"100\" Rate-Limit-Reset=\"36000\"",
		"next": 83.33333333333333,
		"rate": 0.002777777777777778,
		"reset": true
	},
	{
		"burst": 1,
		"headers": "Rate-Limit-Limit=\"5000\" Rate-Limit-Remaining=\"100\" Rate-Limit-Reset=\"Fri, 31 Dec 9999 23:59:59 GMT\"",
		"next": 83.33333333333333,
		"rate": 1.0842021724855044e-8,
		"reset": "9999-12-31T23:59:59Z"
	},
	{
		"burst": 1,
		"headers": "Rate-Limit-Limit=\"5000, 1000;window=3600, 5000;window=86400\" Rate-Limit-Remaining=\"100\" Rate-Limit-Reset=\"36000\"",
		"next": 0.05787037037037037,
		"rate": 0.002777777777777778,
		"reset": true
	},
	{
		"burst": 1000,
		"headers": "Rate-Limit-Limit=\"12, 12;window=1; burst=1000;policy=\\\"leaky bucket\\\"\" Rate-Limit-Remaining=\"100\" Rate-Limit-Reset=\"36000\"",
		"next": 12,
		"rate": 0.002777777777777778,
		"reset": true
	}
]
